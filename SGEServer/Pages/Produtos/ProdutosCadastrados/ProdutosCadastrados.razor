@page "/produtoscadastrados"

@inject NavigationManager Navigation
@inject ProdutosController _Produtos
@inject AuthenticationLogin authStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@layout MainLayout

<style>
    /* estiliza a cor do label do textfield antes de ser clicado */
    .mud-input-label {
        color: #ACACAB !important;
    }
    /* cor do houver do textfield  */
    .mud-input.mud-input-underline:after {
        border-bottom: 2px solid #04D282;
    }
    /* muda cor do label depois de algo ser digitado */
    .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol, .mud-input:focus-within ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: #fff !important;
    }
    /* cor do textfield depois de digitado */
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
        color: #fff;
    }

    .paper-style {
        background-color: #011E36;
        border-radius: 10px;
        padding: 10px;
    }

    .sub-text {
        color: #fff;
        font-size: 20px;
        font-weight: 900;
    }
    h2 {
        text-align: center;
        font-size: @Variaveis.FontPadrao;
        font-weight: 700;
        margin: 20px 0;
        text-transform: uppercase;
        color:#fff;
    }

    .margin-padrao {
        margin: 0 10%;
    }
</style>

@if (isAuthenticated)
{
    <div class="margin-padrao">
    <h2>Produtos Cadastrados</h2>
        <MudGrid Class="paper-style">
        <MudItem xs="12">
            <MudText Class="sub-text">Filtros</MudText>
        </MudItem>
        <MudItem xs="6">
                <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="nome" Variant="Variant.Text" T="string" Label="Nome" />
        </MudItem>

        <MudItem xs="12">
            <MudText Color="@CorMensagem">@Mensagem</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudTable Items="listProdutos" FixedHeader="true" FixedFooter="true" Height="500px" Hover="true" Breakpoint="Breakpoint.None">
                <ToolBarContent>
                    <MudText Style="font-weight: 700;">@listProdutos.Count() Produtos Encontrados</MudText>
                </ToolBarContent>
                <ColGroup>
                    <col style="width: 60px;" />
                    <col />
                    <col />
                    <col style="width: 120px;" />
                    <col style="width: 60px;" />
                    <col style="width: 60px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Item</MudTh>
                    <MudTh>Marca</MudTh>
                    <MudTh>Est. Min.</MudTh>
                    <MudTh></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.CodProduto</MudTd>
                    <MudTd DataLabel="Item">@context.Item</MudTd>
                    <MudTd DataLabel="Marca">@context.Marca</MudTd>
                    <MudTd DataLabel="Est. Min.">@context.EstoqueMinimo</MudTd>
                    <MudTd>
                        <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => BtnEditar(context))" />
                    </MudTd>
                    <MudTd>
                        <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.DeleteForever" OnClick="@(() => BtnRemover(context))" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager style="overflow-y: scroll;" InfoFormat="@itensInfoFormat" RowsPerPageString="Itens por pág." />
                </PagerContent>
                <NoRecordsContent>
                    <MudText Color="Color.Error">Não foi encontrado nenhum produto :\</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Carregando...</MudText>
                </LoadingContent>
            </MudTable>
        </MudItem>

        <MudItem Class="d-flex justify-start align-center" xs="4">
            <MudButton OnClick="BtnVoltar" Variant="Variant.Filled" Color="Color.Error">
                Voltar
            </MudButton>
        </MudItem>
        <MudItem xs="8"></MudItem>


    </MudGrid>

</div>
}

@code {
    private bool isAuthenticated = false;

    private string itensInfoFormat = "{first_item}-{last_item} de {all_items}";
    private List<ProdutosModel> listProdutos = new List<ProdutosModel>();
    private string nome = "";

    private string Mensagem = "";
    private Color CorMensagem = Color.Default;

    private LoginModel Usr = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                isAuthenticated = await AuthenticationLogin.AuthenticateUser(authStateProvider, Usr, Navigation);

                listProdutos = CarregaTabelaProdutos("");

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void BtnVoltar()
    {
        Navigation.NavigateTo("/index");
    }

    private void BtnEditar(ProdutosModel produto)
    {
        Navigation.NavigateTo($"/editarproduto/{produto.CodProduto}");
    }

    private async void BtnRemover(ProdutosModel produto)
    {
        var parameters = new DialogParameters()
        {
            ["CodProduto"] = produto.CodProduto,
            ["Produto"] = produto.Item
        };
        DialogOptions Options = new DialogOptions();
        Options.DisableBackdropClick = true;
        var result = await DialogService.Show<RemoverProduto>("", parameters, Options).Result;

        if (!result.Cancelled)
        {
            string resp = result.Data.ToString()!;


            Snackbar.Add(resp, Severity.Success);

            listProdutos = CarregaTabelaProdutos("");
        }

        StateHasChanged();
    }

    private void BtnPesquisar()
    {
        listProdutos = CarregaTabelaProdutos(nome);
    }

    private List<ProdutosModel> CarregaTabelaProdutos(string name)
    {
        var resp = _Produtos.CarregaProdutosCadastrados(Usr.CodEmpresa, name);

        return resp;
    }
}
